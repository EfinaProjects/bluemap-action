name: BlueMap Render & Deploy

on:
  workflow_call:
    inputs:
      # GH Action
      runner_name:
        required: false
        description: "Set the runner name. Default is `ubuntu-latest`"
        type: string
        default: "ubuntu-latest"
      # BlueMap
      bluemap_version:
        required: true
        description: "BlueMap version"
        type: string
        default: "5.3"
      # Misc
      workdir_path:
        required: true
        description: "Bluemap workdir."
        type: string
      maps_list:
        required: true
        description: "Map list, separated by space."
        type: string
      mc_version:
        required: true
        description: "The render map version"
        type: string
    secrets:
      PTERODACTYL_API_URL:
        required: true
        description: "Pterodactyl Panel URL"
      PTERODACTYL_API_TOKEN:
        required: true
        description: "Pterodactyl Panel API Token"
      PTERODACTYL_ID:
        required: true
        description: "Pterodactyl Panel Server ID"
      NETLIFY_AUTH_TOKEN:
        required: true
        description: "Netlify Token"
      NETLIFY_SITE_ID:
        required: true
        description: "Netlify Site ID"

env:
  python_version: "3.12"
  reusable_workflows_ref: dev
  poetry_installation_cache_key: poetry_cache_01
  LOGURU_LEVEL: "INFO"

jobs:
  render-deploy:
    name: Render & Deploy
    runs-on: ${{ inputs.runner_name }}

    steps:
      ### CleanUp make more space ###
      - name: Clean - Remove unuse software & swap
        run: |
          echo "Before cleanup:"
          sudo df -h
          sudo free -h
          echo ""
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force > /dev/null

          sudo swapoff -a > /dev/null
          sudo rm -f /mnt/swapfile
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/lib/google-cloud-sdk
          sudo rm -rf /usr/lib/firefox
          sudo rm -rf /usr/lib/heroku
          sudo rm -rf /opt/microsoft/msedge
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/.ghcup

          echo "After cleanup:"
          sudo df -h
          sudo free -h
        #  echo ""
        #  echo "list up:"
        #  sudo sudo du -xh / | sort -h

      ### Checkout Main and Reusable Workflows ###
      - name: Checkout Repository - Main
        uses: actions/checkout@v4

      - name: Checkout Repository - BlueMap Action
        uses: actions/checkout@v4
        with:
          repository: EfinaProjects/bluemap-action
          ref: ${{ env.reusable_workflows_ref }}
          path: .github/reusable-workflows

      ### Setup script dependencies ###
      - name: Setup - Java 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Setup - BlueMap
        run: |
          wget -O cli.jar https://github.com/BlueMap-Minecraft/BlueMap/releases/download/v${{ inputs.bluemap_version }}/BlueMap-${{ inputs.bluemap_version }}-cli.jar
          java -jar cli.jar -V 
        working-directory: .github/reusable-workflows

      - name: Setup - Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python_version }}

      - name: Setup - Move Poetry Project Files
        run: |
          cp .github/reusable-workflows/pyproject.toml .
          cp .github/reusable-workflows/poetry.lock .

      - name: Cache - Poetry Installation
        id: poetry_installation_cache
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: ${{ env.poetry_installation_cache_key }}

      - name: Setup - Poetry Install
        if: ${{ steps.poetry_installation_cache.outputs.cache-hit != 'true' }}
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Cache - Poetry Dependencies
        id: poetry_dependencies_cache
        uses: actions/cache@v4
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}

      - name: Setup - Poetry install dependencies
        if: ${{ steps.poetry_dependencies_cache.outputs.cache-hit != 'true' }}
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
          poetry install --no-interaction

      ### Start Script ###

      ### Download and extract maps
      - name: Poetry - Download Latest backup
        run: |
          poetry run python $GITHUB_WORKSPACE/.github/reusable-workflows/scripts/00_pydactyl_s3.py
        env:
          MAP_CONFIG_PATH: ${{ inputs.workdir_path }}
          PTERODACTYL_API_URL: ${{ secrets.PTERODACTYL_API_URL }}
          PTERODACTYL_API_TOKEN: ${{ secrets.PTERODACTYL_API_TOKEN }}
          PTERODACTYL_ID: ${{ secrets.PTERODACTYL_ID }}

      - name: Poetry - Extract Maps
        run: |
          poetry run python $GITHUB_WORKSPACE/.github/reusable-workflows/scripts/01_unarchive.py
          df -h
        env:
          MAP_CONFIG_PATH: ${{ inputs.workdir_path }}
          MAPS_LIST: ${{ inputs.maps_list }}

      ### Store web map build cache

      ### Render Map web
      - name: BlueMap - Render Maps
        run: |
          java -jar $GITHUB_WORKSPACE/.github/reusable-workflows/cli.jar -v ${{ inputs.mc_version }} -r
        working-directory: ${{ inputs.workdir_path }}

      ### Save web map build cache

      ### Publish Maps
      - name: Netlify - Deploy Website
        uses: South-Paw/action-netlify-cli@v2
        id: netlify
        with:
          args: deploy --json --prod --dir './web' --message 'Deploy from GitHub Action'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        working-directory: ${{ inputs.workdir_path }}
